
import numpy as np
import matplotlib.pyplot as plt

h = 0.02        
k = 0.8 * h     
a = 1           
N = 100         
p_values = np.arange(0, N) 

def eigenwerte(p, epsilon):
    imag_part = -1j * a / h * np.sin(2 * np.pi * p * h)
    real_part = -2 * epsilon / h**2 * (1 - np.cos(2 * np.pi * p * h))  
    return real_part + imag_part

epsilon_values = [0, 0.001, 0.005, 0.008, 0.0125, 0.014]
titles = [r' $\epsilon = 0$ (Forward Euler)', r' $\epsilon = 0.001$', r'$\epsilon = 0.005$', r'$\epsilon$ = 0.008 (Lax- Wendroff)', r' $\epsilon$ = 0.0125 (Lax- Friedrich)', r'$\epsilon = 0.014$']

fig, axes = plt.subplots(2, 3, figsize=(10, 6))  # 3x2 Raster

for ax, epsilon, title in zip(axes.flat, epsilon_values, titles):
    f = eigenwerte(p_values, epsilon)
    
    # Plotting Eigenwerte
    ax.plot(k*f.real, k*f.imag, '.', label=f'Eigenwerte (epsilon={epsilon})')
    ax.set_title(title) 
    ax.set_xlabel('Realteil')
    ax.set_ylabel('Imagin√§rerteil')
    
    # Verschiebung der y-Achse zu x=-2.5
    ax.spines['left'].set_position(('data', -2.5))  # Die y-Achse wird auf x = -2.5 verschoben.
    ax.spines['left'].set_visible(False)  # Die linke Achse hinter den Daten unsichtbar machen
    
    # Plotting Zusatzlinien und Kreis
    ax.axhline(0, color='black', linewidth=0.5, linestyle='--')  # Linie bei y=0
    ax.axvline(-2.5, color='black', linewidth=0.5, linestyle='--')  # Verschobene Linie bei x=-2.5
    
    circle = plt.Circle((-1, 0), 1, color='grey', fill=False, linestyle='-', linewidth=2)
    ax.add_artist(circle) 
    
    # Grenzen und Grid
    #ax.set_xlim(-7, 0.5)
    ax.set_ylim(-1.2 ,1.2)
    ax.grid(True)  
    ax.set_aspect("equal")
    

plt.tight_layout()
plt.show()
