import numpy as np
import matplotlib.pyplot as plt

radius = 1.0
theta = np.linspace(0, 2 * np.pi, 100)
x = radius * np.cos(theta)
y = radius * np.sin(theta)

a = 1           
epsilon = 0  
N = 50
h = 1/(N+1)  
k = 0.8*h      
p_values = np.arange(0, N)  

def eigenwerte(p, epsilon):
    imag_part = - a / h * np.sin(2 * np.pi * p * h)
    real_part = 0
    return real_part + 1j*imag_part

# Berechnung der Eigenwerte
f1 = eigenwerte(p_values, epsilon)

# Kombinierter Plot
plt.figure(figsize=(10, 10))

# Stabilit채tsbereich (Kreis)
plt.plot(x - 1, y, color='grey', linestyle='-', linewidth=2, label="Stabilit채tsbereich")  # Kreisrand

# Eigenwerte (Forward Euler)
plt.plot(k*f1.real, k*f1.imag, '.', color='#1f77b4', label='Eigenwerte (Forward Euler)', markersize=8)

plt.axhline(0, color='black', linewidth=0.5, linestyle='--')
plt.axvline(0, color='black', linewidth=0.5, linestyle='--')
plt.xticks([-2, -1, 0, 1], fontsize=12)
plt.yticks([-1, 0, 1], fontsize=12)
plt.xlim(-3, 1)
plt.ylim(-2, 2)

plt.xlabel(r'$\mathrm{Re}(\alpha h)$', fontsize=20)
plt.ylabel(r'$\mathrm{Im}(\alpha h)$', fontsize=20)

plt.scatter(-2, 0, color='black')
plt.scatter(-1, 1, color='black')
plt.scatter(-1, -1, color='black')
plt.scatter(0, 0, color='black')
plt.text(-2.1, 0.05, r'$-2$', fontsize=16, ha='center', color='black')
plt.text(0.1, 1, r'$i$', fontsize=16, ha='center', color='black')
plt.text(0.1, -1, r'$-i$', fontsize=16, ha='center', color='black')

plt.title('Stabilit채tsbereich des Forward Euler Verfahrens und Eigenwerte', fontsize=20, pad=20)
plt.grid(True, which='both', linestyle='--', linewidth=0.5)
plt.legend(fontsize=14)
plt.gca().set_aspect('equal', adjustable='box')
plt.xlabel('Reeller Teil', fontsize=20)  
plt.ylabel('Imagin채rer Teil', fontsize=20)
plt.show()
